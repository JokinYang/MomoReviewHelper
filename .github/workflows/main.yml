name: CI
on:
  schedule:
    # Runs every 1th minute past UTC+8 the 3 , 10, 17 and 20rd hour.
    - cron: '1 19,2,9,12 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      fullRun:
        description: 'if run all steps,pass 1 to full run'
        required: false
        default: '0'



jobs:

  check-necessary:
    runs-on: ubuntu-latest
    outputs:
      NEED_RUN: ${{ steps.checkPageExists.outputs.NEED_RUN }}
      TIMESTAMP: ${{ steps.checkPageExists.outputs.TIMESTAMP }}

    steps:
      - uses: szenius/set-timezone@v1.0
        with: 
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
      - uses: actions/checkout@v2
        with:
          ref: gh-pages
      - name: Check page exists
        id: checkPageExists
        run: |
          from datetime import *
          import os
          import re

          now = datetime.now(timezone(timedelta(hours=8)))
          print("Time  with   tz:"+str(now))

          print("Time without tz:"+str(datetime.now()))
          print('Timestamp without tz:{:%Y%m%d}'.format(datetime.now().date()))

          delta = 1 if now.time() < time(4, 0, 0) else 0
          print("Delta :"+str(delta))
          timestamp = '{:%Y%m%d}'.format(now.date() - timedelta(delta))
          print('::set-output name=TIMESTAMP::{}'.format(timestamp))
          print("Timestamp with tz:"+str(timestamp))

          exists = any(filter(lambda x: os.path.isfile(x) and re.match('.*{}.*'.format(timestamp), x), os.listdir('./')))
          print('::set-output name=NEED_RUN::{}'.format(int(not exists)))
        shell: python


  get-words:
    runs-on: macos-latest
    needs: [ check-necessary ]
    if: needs.check-necessary.outputs.NEED_RUN == '1' || github.event.inputs.fullRun == '1'

    env:
      # env for ensure-apk
      apk-file: maimemo.apk
      apk-url: https://cdn.maimemo.com/apk/maimemo_v3.8.56_1617086292.apk
      # env for setup-python
      python-version: 3.8
      api-level: 28
      # env for memo login
      ACCOUNT: ${{ secrets.ACCOUNT }}
      PASSWORD: ${{ secrets.PASSWORD }}
      # timestamp of generated file
      TIMESTAMP: ${{ needs.check-necessary.outputs.TIMESTAMP }}

    steps:
      - uses: actions/checkout@v2

      - uses: szenius/set-timezone@v1.0
        with: 
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"

      #### 1. setup python
      - name: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Python pkgs Cache
        uses: actions/cache@v2
        id: python-cache
        with:
          path: |
            ${{ env.pythonLocation }}
            ~/.uiautomator2
          key: python${{ env.python-version }}-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ env.pythonLocation }}
      - name: install requirements
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt

      #### 2. Download and cache APK
      - name: APK Cache
        uses: actions/cache@v2
        id: apk-cache
        with:
          path: ./${{ env.apk-file }}
          key: ${{ env.apk-url }}
      - name: download apk
        if: steps.apk-cache.outputs.cache-hit != 'true'
        run: |
          wget -O ${{ env.apk-file }} ${{ env.apk-url }}

      #### 3. Cache AVD
      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      #### Run main script
      - name: run
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb shell pm uninstall com.maimemo.android.momo. || echo
            adb shell rm -rf /data/app/com.maimemo.android.momo/ || echo
            adb install -r -g ${{ env.apk-file }}
            adb shell pm list packages com.maimemo.android.momo
            python get_today_word.py
      - run: |
          cat *.md

      - uses: actions/checkout@v2
        with:
          ref: gh-pages
          clean: false
      - name: push to GitHub Pages
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          python3 update.py
          git add "${TIMESTAMP}*" || echo "Bypass the error"
          git add -u
          git commit -m "Generate review of ${TIMESTAMP}"  || echo "Bypass the arror"
          git push
          
